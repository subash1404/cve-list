import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import './cveDetails.css';
function useQuery() {
  return new URLSearchParams(useLocation().search);
}
function CVEDetails() {
const query = useQuery();
const cveId = query.get("cveId");
  const [cveDetails, setCveDetails] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetch(`http://localhost:3001/cves?cveId=${cveId}`)
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to fetch CVE details");
        }
        return response.json();
      })
      .then((data) => {
        setCveDetails(data);
      })
      .catch((error) => {
        setError(error.message);
      });
  }, [cveId]);

  if (error) {
    return <p>Error: {error}</p>;
  }

  if (!cveDetails) {
    return <p>Loading...</p>;
  }

  const { id, description, cvssMetricV2, metrics,configurations } = cveDetails;

  return (
    <div className="main">
      <h1>{id}</h1>
      <h2>Description: </h2>
      <p>{description}</p>
      <h2>CVSS v2 Metrics:</h2>

      <p className="scores">
        <b>Severity: </b> {metrics.cvssMetricV2[0].baseSeverity} &nbsp;
        &nbsp;&nbsp;
        <b>Base Score: </b> {cvssMetricV2.baseScore}
      </p>
      <p>
        <b>Vector String: </b> {cvssMetricV2.vectorString}
      </p>
      <table border="1">
        <thead>
          <tr>
            <th>Access Vector</th>
            <th>Access Complexity</th>
            <th>Authentication</th>
            <th>Confidentiality Impact</th>
            <th>Integrity Impact</th>
            <th>Availability Impact</th>
            <th>Base Score</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>{cvssMetricV2.accessVector}</td>
            <td>{cvssMetricV2.accessComplexity}</td>
            <td>{cvssMetricV2.authentication}</td>
            <td>{cvssMetricV2.confidentialityImpact}</td>
            <td>{cvssMetricV2.integrityImpact}</td>
            <td>{cvssMetricV2.availabilityImpact}</td>
            <td>{cvssMetricV2.baseScore}</td>
          </tr>
        </tbody>
      </table>
      <h3>Scores:</h3>
      <p>
        <b>Exploitability score: </b>{" "}
        {metrics.cvssMetricV2[0].exploitabilityScore}
      </p>
      <p>
        <b>Impact score: </b> {metrics.cvssMetricV2[0].impactScore}
      </p>
      <h2> CPE </h2>
      <table border="1">
        <thead>
          <tr>
            <th>Vulnerable</th>
            <th>Criteria</th>
            <th>Match Criteria ID</th>
          </tr>
        </thead>
        <tbody>
          {configurations[0].nodes.map((node, index) =>
            node.cpeMatch.map((cpe, i) => (
              <tr key={`${index}-${i}`}>
                <td>{cpe.vulnerable ? "Yes" : "No"}</td>
                <td>{cpe.criteria}</td>
                <td>{cpe.matchCriteriaId}</td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
}

export default CVEDetails;
