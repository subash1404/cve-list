import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import "./cveList.css";

function CvesList() {
  const [isLoading, setIsLoading] = useState(true);
  const [cves, setCves] = useState([]);
  const [cveLength, setCveLength] = useState(0);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [startPage, setStartPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [filterType, setFilterType] = useState("cveId");
  const [filterValue, setFilterValue] = useState("");
  const [sortOrder, setSortOrder] = useState("asc");
  const navigate = useNavigate();

  const fetchData = () => {
    setIsLoading(true);
    fetch(
      `http://localhost:3001/cves/list?page=${currentPage}&itemsPerPage=${itemsPerPage}&filterType=${filterType}&filterValue=${filterValue}&sortOrder=${sortOrder}` // Include sortOrder in the API request
    )
      .then((response) => {
        if (!response.ok) {
          throw new Error("Failed to fetch data");
        }
        return response.json();
      })
      .then((data) => {
        setCves(data.cves);
        setCveLength(data.cveLength);
        setTotalPages(data.totalPages);
        setIsLoading(false);
      })
      .catch((error) => {
        setError(error.message);
        setIsLoading(false);
      });
  };

  useEffect(() => {
    fetchData();
  }, [currentPage, itemsPerPage, sortOrder]);

  useEffect(() => {
    setCurrentPage(1);
    navigate(`/cves/list?page=${1}`);
    fetchData();
  }, [itemsPerPage]);

  const handleCveClick = (cveId) => {
    navigate(`/cves?cveId=${cveId}`);
  };

  const handlePageChange = (page) => {
    setCurrentPage(page);
    navigate(`/cves/list?page=${page}`);
    if (page <= 5) {
      setStartPage(1);
    } else if (page + 5 >= totalPages) {
      setStartPage(totalPages - 4);
    } else {
      setStartPage(page);
    }
  };

  const handleItemsPerPageChange = (e) => {
    const newItemsPerPage = parseInt(e.target.value);
    setCurrentPage(1);
    setStartPage(1);
    setItemsPerPage(newItemsPerPage);
  };

  const handleFilterTypeChange = (e) => {
    setFilterType(e.target.value);
  };

  const handleFilterValueChange = (e) => {
    setFilterValue(e.target.value);
  };

  const handleFilterSubmit = (e) => {
    e.preventDefault();
    setCurrentPage(1);
    navigate(`/cves/list?page=${currentPage}`);
    fetchData();
  };

  const handleSortOrderChange = (e) => {
    setSortOrder(e.target.value);
  };

  if (isLoading) {
    return <h1 className="loading">Loading...</h1>;
  }

  if (error) {
    return <h1 className="error">Error: {error}</h1>;
  }
  const tableContent =
    cves.length == 0 ? (
      <tbody>
        <tr>
          <td className="no-data" colSpan="5"><h1>No Data found</h1></td>
        </tr>
      </tbody>
    ) : (
      <tbody>
        {cves.map((cve) => (
          <tr
            key={cve.id}
            onClick={() => handleCveClick(cve.id)}
            className="cve-table-row"
          >
            <td>{cve.id}</td>
            <td>{cve.identifier}</td>
            <td>{cve.published}</td>
            <td>{cve.lastModified}</td>
            <td>{cve.status}</td>
          </tr>
        ))}
      </tbody>
    );
    const recordCountContent =
      cves.length == 0 ? (
        <h5>{"Displaying 0 records"}</h5>
      ) : (
        <h5>
          {"Displaying "}
          {(currentPage - 1) * itemsPerPage + 1} {"- "}
          {Math.min(
            (currentPage - 1) * itemsPerPage + itemsPerPage,
            cveLength
          )}{" "}
          of {cveLength}
          records
        </h5>
      );
  return (
    <div id="cveList" className="cve-list-container">
      <h1 className="cve-list-heading">CVE List</h1>
      <p className="cve-total-records">Total Records: {cveLength}</p>
      <div className="cve-filter-section">
        <form onSubmit={handleFilterSubmit}>
          <label htmlFor="filterType">Filter by : </label>
          <select
            id="filterType"
            value={filterType}
            onChange={handleFilterTypeChange}
          >
            <option value="cveId">CVE ID</option>
            <option value="year">Last Modified</option>
            <option value="CVSSv3">CVSSv3 Vector String</option>
            <option value="CVSSv2">CVSSv2 Vector String</option>
          </select>
          <input
            type="text"
            placeholder="Enter filter value"
            value={filterValue}
            onChange={handleFilterValueChange}
          />
          <button className="filter-apply" type="submit">
            Apply Filter
          </button>
        </form>
        <div className="sort-order">
          <label htmlFor="sortOrder">Sort Order : </label>
          <select
            id="sortOrder"
            value={sortOrder}
            onChange={handleSortOrderChange}
          >
            <option value="asc">Ascending</option>
            <option value="desc">Descending</option>
          </select>
        </div>
      </div>
      <table className="cve-table" border="1">
        <thead>
          <tr>
            <th>CVE ID</th>
            <th>Identifier</th>
            <th>Published Date</th>
            <th>Last Modified Date</th>
            <th>Status</th>
          </tr>
        </thead>
        {tableContent}
      </table>
      <div className="sort">
        <div className="items-perpage">
          <label htmlFor="itemsPerPage">Items per page : </label>
          <select
            id="itemsPerPage"
            value={itemsPerPage}
            onChange={handleItemsPerPageChange}
          >
            <option value="10">10</option>
            <option value="50">50</option>
            <option value="100">100</option>
          </select>
        </div>
        <div className="cve-record_count">
          {recordCountContent}
        </div>
      </div>
      <div className="cve-pagination">
        <button
          onClick={() =>
            handlePageChange(
              currentPage - 5 > 1 ? currentPage - 5 : currentPage - 1
            )
          }
          disabled={currentPage === 1}
          className="control"
        >
          {"<"}
        </button>
        {[...Array(5).keys()].map((index) => {
          const page = startPage + index;
          return (
            <button
              key={page}
              onClick={() => handlePageChange(page)}
              disabled={page === currentPage}
              className="cve-pagination-button"
            >
              {page}
            </button>
          );
        })}
        <button
          onClick={() => handlePageChange(currentPage + 5)}
          disabled={currentPage === totalPages}
          className="control"
        >
          {">"}
        </button>
      </div>
    </div>
  );
}
export default CvesList;
